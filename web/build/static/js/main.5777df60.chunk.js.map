{"version":3,"sources":["logo.svg","GameMenu.js","TTBoard.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","getEndpoint","point","GameItem","props","state","hovering","this","data","gameName","style","width","height","cursor","background","display","flexDirection","justifyContent","alignItems","onMouseEnter","setState","onMouseLeave","flex","textAlign","marginLeft","id","enable-background","viewBox","xmlns","d","React","Component","X","lineProps","x1","y1","x2","y2","O","cx","cy","r","fill","MiniX","MiniO","B","getSvg","toDisplay","standardLine","stroke","strokeWidth","strokeLinecap","Tile","useState","hover","setHover","onHover","undefined","onClick","color","jusifyContent","alignContent","margin","padding","position","showText","marginTop","marginBottom","bottom","right","left","transform","TBoard","metaBoard","pos","w","x","gameState","turn","lastTurn","nextMove","turnOrder","map","z","y","item","board","includes","strRep","playMove","allcells","allCells","cells","push","emptyBoard","f","vectorSub","v1","v2","vectorAdd","seenLines","possibleLines","key","inRange","vec","every","lines","seen","Set","linetest","direction","line","has","fa","add","next","length","nextNext","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","TTBoard","score","linesp1","linesp2","ai","xs","os","blockOrder","helpOrder","blockingPiece","setMeta","value","toggleTurn","then","console","log","boardScore","piece","helping","blocking","setMetaHere","totalScore","yourLines","theirLines","linescores","forEach","place","sameCount","blockPieces","blocked","themblocked","cell","yourLine","theirLine","lineScore","reduce","acc","setIndex","newItem","boardWith","placePieces","boardCopyA","boardOriginal","boardCopy","p","bestAIMove","forBoard","max","Infinity","move","currentPiece","currentSide","filter","moveScore","takeAITurn","turnLoc","shift","isAITurn","i","marginRight","top","fontSize","App","rel","href","integrity","crossOrigin","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5777df60.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState,useEffect } from 'react';\r\n\r\nconst axios = require('axios');\r\n\r\n\r\n\r\nfunction  getEndpoint(point){\r\n    return `${point}`\r\n}\r\n\r\nclass GameItem extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hovering:false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var [gameName,_] = this.props.data\r\n        return <div style={{width:500,height:100,cursor:'pointer',background:(!this.state.hovering ? \"#8558b7\":'#b590de'),display:'flex',flexDirection:'row',justifyContent:'center',alignItems:'center'}}\r\n                    onMouseEnter={()=>{\r\n                        this.setState({hovering:true})\r\n                    }}\r\n                    onMouseLeave={()=>{\r\n                        this.setState({hovering:false})\r\n                    }}\r\n                    //onClick={/*this.props.joinGame(gameName)*/}\r\n        >\r\n            <p style={{flex:1,textAlign:'left',marginLeft:10}}>{gameName}</p>\r\n            <svg style={{width:100,height:80}} id=\"Capa_1\" enable-background=\"new 0 0 512 512\" height=\"512\" viewBox=\"0 0 512 512\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m437.02 74.98c-48.353-48.351-112.64-74.98-181.02-74.98s-132.667 26.629-181.02 74.98c-48.351 48.353-74.98 112.64-74.98 181.02s26.629 132.667 74.98 181.02c48.353 48.351 112.64 74.98 181.02 74.98s132.667-26.629 181.02-74.98c48.351-48.353 74.98-112.64 74.98-181.02s-26.629-132.667-74.98-181.02zm-181.02 407.02c-124.617 0-226-101.383-226-226s101.383-226 226-226 226 101.383 226 226-101.383 226-226 226z\"/><path d=\"m374.782 243.84-180-130c-4.566-3.298-10.596-3.759-15.611-1.195s-8.171 7.722-8.171 13.355v260c0 5.633 3.156 10.791 8.171 13.355 2.154 1.102 4.495 1.645 6.827 1.645 3.097 0 6.179-.958 8.784-2.84l180-130c3.904-2.82 6.218-7.344 6.218-12.16s-2.312-9.34-6.218-12.16zm-173.782 112.824v-201.328l139.381 100.664z\"/></g></svg>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n\r\nclass GameMenu extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            games:[],\r\n            creating:false\r\n        }\r\n        this.getGames()\r\n    }\r\n\r\n    getGames(){\r\n        fetch(getEndpoint('games/'))\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(result)\r\n                    this.setState((state)=>{\r\n                        state.games = result\r\n                        return state\r\n                    })\r\n                },\r\n                (error) => {\r\n\r\n                }\r\n            )\r\n    }\r\n\r\n    joinGame(gameName){\r\n        axios.post(getEndpoint('games/'), {\r\n            gameName\r\n        })\r\n            .then(response =>{\r\n                //this.props.joinedGame(gameName)\r\n                this.setState({gameName})\r\n            } );\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return <div>\r\n            {\r\n                this.state.creating ?\r\n                    <form action=\"/games\">\r\n                        <input type=\"text\" id=\"fname\" name=\"fname\"/>\r\n                        <input type={\"submit\"} value={\"Submit\"}/>\r\n                    </form>\r\n                    :\r\n                <button onClick={()=>{\r\n                this.setState((state)=>({...state, creating:true}))}\r\n                } style={{marginBottom:30, width:180,height:60}}>\r\n                    Create Game\r\n                </button>\r\n            }\r\n\r\n            <div style={{display:'flex' ,flexDirection:'column'}}>\r\n            {\r\n                this.state.games.map((data)=>{\r\n                    return <GameItem data={data} joinGame={this.joinGame()}/>\r\n                })\r\n            }\r\n        </div></div>\r\n    }\r\n}\r\n\r\nexport default GameMenu\r\n","import React, { useState,useEffect } from 'react';\r\nimport GameMenu from \"./GameMenu\";\r\n\r\n\r\nfunction X(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"10\" y1=\"10\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"60\" y1=\"10\" x2=\"10\" y2=\"60\"  {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction O(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg  xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle  cx=\"35\" cy=\"35\" r=\"30\" fill=\"none\" {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction MiniX(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"2\" y1=\"2\" x2=\"12\" y2=\"12\"  {...lineProps} />\r\n            <line   x1=\"12\" y1=\"2\" x2=\"2\" y2=\"12\"  {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction MiniO(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg  xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle  cx=\"7\" cy=\"7\" r=\"6\" fill=\"none\" {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction B(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"35\" y1=\"12\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"35\" y1=\"12\" x2=\"10\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"12\" y1=\"60\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n        </svg>)\r\n}\r\n\r\nfunction getSvg(toDisplay, lineProps){\r\n    switch(toDisplay){\r\n        case \"X\" : return (<X lineProps={lineProps}/>)\r\n        case \"O\" : return (<O lineProps={lineProps}/>)\r\n        case \"B\" : return  (<B lineProps={lineProps}/>)\r\n    }\r\n}\r\nconst standardLine = {stroke:\"black\", strokeWidth:\"4\", strokeLinecap:\"round\"};\r\n\r\nfunction Tile(props){\r\n    const [hover, setHover] = useState(false);\r\n    const lineProps = hover && props.onHover !== \"\" && props.onHover !== undefined  ?\r\n        {stroke:\"gray\", strokeWidth:\"4\", strokeLinecap:\"round\"}\r\n        : standardLine\r\n    ;\r\n    const toDisplay = (hover && props.onHover) || props.display\r\n    return (\r\n        <div onClick={props.onClick}\r\n\r\n             onMouseEnter={() => setHover(true)}\r\n             onMouseLeave={() => setHover(false)}\r\n\r\n             style={{width:'70px',height:'70px', background:props.background, color:'black',\r\n            jusifyContent:'center',\r\n            alignContent:'center',\r\n            margin:2,\r\n            padding:0,\r\n                 position:'relative'\r\n        }}>\r\n            {getSvg(toDisplay, lineProps)\r\n            }\r\n            {props.showText ?\r\n                <p style={{margin:0, marginTop:'auto',marginBottom:'auto',display:'block',position:'absolute',\r\n                    bottom:({\r\n                        X:2,\r\n                        O:'50%'\r\n                    }[toDisplay])\r\n                    ,right:'auto',left:'50%',transform:'translateX(-50%)',\r\n                    textAlign: 'center',}}>\r\n                    {props.showText}\r\n                </p> : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction TBoard(props){\r\n    const {showText,metaBoard, pos:[w,x]} = props\r\n    const {turn,lastTurn} = props.gameState;\r\n    const nextMove = turnOrder[turn]\r\n    return (<div style={{...props.style,flex:1, marginTop:10,marginBottom:10 }}>\r\n        {\r\n            [0,1,2].map((z)=>(\r\n                <div key={z} style={{display:'flex',flexDirection:'row'}}>\r\n                    {[0,1,2].map((y) => {\r\n                        const item = props.board[y][z];\r\n                        return (\r\n                        <Tile showText={metaBoard[w][x][y][z].showText} display={item} key={y}\r\n                              onHover={item===\"E\"?nextMove:\"\"} background={\r\n                                  lastTurn.includes(strRep(w,x,y,z)) ?\r\n                                      \"#FF7F7F\" : \"#00FFFFFF\"\r\n                        }\r\n                          onClick={()=>{\r\n                            if(item===\"E\"){\r\n                                props.playMove(w,x,y,z,nextMove);\r\n                            }\r\n                        }} />\r\n                    )})}\r\n                </div>\r\n\r\n            ))\r\n        }\r\n        {/*\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"X\"/>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"X\"/>\r\n        </div>\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"B\"/>\r\n            <Tile display=\"O\"/>\r\n        </div>\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"X\"/>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"X\"/>\r\n        </div>*/}\r\n    </div>\r\n   )\r\n}\r\n\r\nvar allcells = null;\r\n\r\nfunction allCells(){\r\n    if(allcells !==null)\r\n        return allcells\r\n    const cells = []\r\n    for(var w=0; w<3; w++){\r\n        for(var x=0; x<3; x++){\r\n            for(var y=0; y<3; y++){\r\n                for(var z=0; z<3; z++){\r\n                    cells.push([w,x,y,z])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    allcells = cells\r\n    return cells;\r\n}\r\n\r\nfunction emptyBoard(f){\r\n    const board = [];\r\n    for(var w=0; w<3; w++){\r\n        board[w] = []\r\n        for(var x=0; x<3; x++){\r\n            board[w][x] = []\r\n            for(var y=0; y<3; y++){\r\n                board[w][x][y] = []\r\n                for(var z=0; z<3; z++){\r\n                    board[w][x][y][z] = f();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}\r\n\r\nfunction reverseVel([w,x,y,z]){\r\n    return [-w,-x,-y,-z];\r\n}\r\n\r\n\r\n\r\nfunction inGameBounds(){\r\n    return arguments.slice.call(arguments).every((n)=>(n>=0 && n <= 2))\r\n}\r\nfunction inVelocityBounds(){\r\n    return arguments.slice.call(arguments).every((n)=>(n>=-1 && n <= 1))\r\n}\r\n\r\nfunction getPotentialLine(v1,v2){\r\n    const dif = vectorSub(v2,v1);\r\n}\r\n\r\nfunction vectorSub(v1,v2){\r\n    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2], v1[3] - v2[3]]\r\n}\r\n\r\nfunction vectorAdd(v1,v2){\r\n    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2], v1[3] + v2[3]]\r\n}\r\n\r\n\r\nconst seenLines = {}\r\n\r\nfunction strRep(w,x,y,z){\r\n    return `${w}${x}${y}${z}`\r\n}\r\n\r\nfunction possibleLines(w,x,y,z){\r\n    const key = strRep(w,x,y,z)\r\n    if((key in seenLines)){\r\n        return seenLines[key]\r\n    }\r\n    function inRange(vec){\r\n        return vec.every((x)=>(x < 3 && x >= 0))\r\n    }\r\n\r\n    const point = [w,x,y,z];\r\n    const lines = []\r\n    const seen = new Set()\r\n    for(let w=-1;w<2;w++){\r\n        for(let x=-1;x<2;x++){\r\n            for(let y=-1;y<2;y++){\r\n                linetest:for(let z=-1;z<2;z++){\r\n                    if(w===0 && z===0 && y===0 && x===0)\r\n                        continue;\r\n                    const id = `${w}${x}${y}${z}`\r\n                    const direction = [w,x,y,z];\r\n                    const line = [point];\r\n\r\n                    if(seen.has(id)){\r\n                        continue;\r\n                    }\r\n                    seen.add(id)\r\n                    for(let fa in [0, 1]){\r\n                        let next = [vectorSub,vectorAdd][fa](point,direction);\r\n                        if(inRange(next)){\r\n                            line.push(next);\r\n                            if(line.length === 3){\r\n                                lines.push(line);\r\n                                continue linetest;\r\n                            }\r\n                            let nextNext =  [vectorSub,vectorAdd][fa](next,direction);\r\n                            if(inRange(nextNext)){\r\n                                line.push(nextNext);\r\n                                lines.push(line);\r\n                                continue linetest;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    seenLines[key] = lines\r\n    return lines\r\n}\r\n\r\nfunction boardCopy(boardOriginal){\r\n    const board = emptyBoard(()=>\"E\")\r\n    allCells().forEach(([w,x,y,z])=>{\r\n        board[w][x][y][z] = boardOriginal[w][x][y][z]\r\n    })\r\n    return board\r\n}\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst turnOrder = [\"X\",\"B\",\"O\",\"B\"];\r\n\r\nclass TTBoard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const defaultMeta = ()=>({\r\n            score:0\r\n        })\r\n\r\n        this.state = {\r\n            board:emptyBoard(()=>(\"E\")),\r\n            metaBoard:emptyBoard(defaultMeta),\r\n            gameState:{\r\n                turn:0,\r\n                    linesp1:0,\r\n                linesp2:0,\r\n                lastTurn:[]\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {board,metaBoard,gameState} = this.state\r\n\r\n        const {ai} = this.props\r\n\r\n        const xs = []\r\n        const os = []\r\n\r\n\r\n        const blockOrder = [\"O\",\"O\",\"X\",\"X\"]\r\n        const helpOrder = [\"X\",\"X\",\"O\",\"O\"]\r\n        const blockingPiece = blockOrder[this.state.gameState.turn]\r\n\r\n\r\n\r\n        const setMeta = (w,x,y,z,key,value) => {\r\n            this.setState((state)=>{\r\n                state.metaBoard[w][x][y][z][key] = value\r\n                return state\r\n            })\r\n        }\r\n        const toggleTurn = (then=()=>{})=>{\r\n            this.setState((state)=>({...state, gameState:{...state.gameState, turn:((state.gameState.turn + 1) % 4)}}),()=>{\r\n                console.log(\"here now \", this.state.gameState.turn)\r\n                then()\r\n            })\r\n        }\r\n\r\n\r\n        var boardScore = (piece,helping, blocking,board,setMetaHere=false) => {\r\n            const currentPieces = {X:xs,O:os}[piece];\r\n            let totalScore = 0;\r\n            let lines = 0;\r\n            const cellscores = {}\r\n            const bScore = {cellscores, piece,blocking}\r\n\r\n            var yourLines = 0\r\n            var theirLines = 0\r\n\r\n            let myPossibleLines = 0;\r\n            let theirPossibleLines = 0;\r\n\r\n            const linescores = []\r\n            shuffle(allCells()).forEach((place)=>{\r\n                const pLines = possibleLines(...place)\r\n                pLines.forEach((line) => {\r\n                    var sameCount = 0;\r\n                    let blockPieces = 0;\r\n                    let blocked = 1;\r\n                    let themblocked = 1;\r\n                    line.forEach(([w, x, y, z]) => {\r\n                        const cell = board[w][x][y][z]\r\n                        if (cell === helping) {\r\n                            sameCount += 1\r\n                            themblocked = 0\r\n                        } else if (cell === blocking) {\r\n                            blockPieces += 1\r\n                            blocked = 0\r\n                        } else if (cell === \"B\") {\r\n                            blocked = 0\r\n                            themblocked = 0\r\n                        }\r\n                    });\r\n                    const yourLine = sameCount * blocked;\r\n                    const theirLine = themblocked * blockPieces;\r\n                    var lineScore = (yourLine ** 4) - (theirLine**4)\r\n                    if(theirLine === 3){\r\n                        theirLines += 1\r\n                    }\r\n                    if(yourLine === 3){\r\n                        yourLines += 1\r\n                    }\r\n                    if(lineScore > 30){\r\n                        console.log(place,line,lineScore, piece,blockingPiece,sameCount,blockPieces,blocked,themblocked,\"AAAAAAAAAAAAA\")\r\n                    }\r\n\r\n                    //if (line[0][0] === 0 && line[1][0] === 0)\r\n                    //    linescores.push({lineScore, line, sameCount, blockPieces, blocked, themblocked})\r\n\r\n                    linescores.push([yourLine,theirLine])\r\n                })\r\n                //cellscores[place.toString()] = {lines:linescores, placeScore}\r\n                //totalScore += placeScore\r\n                //if(setMetaHere && false)\r\n                //    setMeta(place[0],place[1],place[2],place[3],\"showText\",placeScore)\r\n            })\r\n            //console.log([lines,totalScore],bScore)\r\n            yourLines /= 6\r\n            theirLines /= 6\r\n\r\n            if(setMetaHere){\r\n                setMeta(0,0,0,0,\"boardScore\", totalScore)\r\n                if(piece!=\"B\"){\r\n                    setMeta(0,0,0,0,\"X\", blocking===\"O\" ? yourLines : theirLines)\r\n                    setMeta(0,0,0,0,\"O\", blocking!==\"O\" ? yourLines : theirLines)\r\n                }\r\n                /*this.setState((state)=>{\r\n                    state.gameState[blockingPiece===\"O\" ?\"linesp1\" :\"linesp2\"] = lines\r\n                })*/\r\n            }\r\n\r\n            totalScore = linescores.reduce((acc,[yourLine,theirLine])=>(acc + (yourLine**(4)) - (theirLine**(4+yourLines - theirLines))),0)\r\n\r\n            return [lines,totalScore]\r\n        }\r\n        // set before toggling turn!\r\n        var setIndex = (w,x,y,z,newItem,then=()=>{}) => {\r\n            console.log(\"SETINDEX\", w,x,y,z, newItem, this.state.gameState.turn)\r\n            if(newItem === \"X\"){\r\n                xs.push([w,x,y,z])\r\n            } else if(newItem === \"O\"){\r\n                os.push([w,x,y,z])\r\n                os.push([w,x,y,z])\r\n            }\r\n\r\n            this.setState((state)=>{\r\n                state.board[w][x][y][z] = newItem\r\n                return state\r\n            },then)\r\n        }\r\n\r\n        function boardWith(board,placePieces){\r\n            let boardCopyA = boardCopy(board)\r\n            placePieces.forEach(([w,x,y,z,p])=>{\r\n                boardCopyA[w][x][y][z] = p\r\n            })\r\n            return boardCopyA\r\n        }\r\n\r\n        function playableMoves(forBoard){\r\n            return allCells().filter(([w,x,y,z])=>(\r\n                forBoard[w][x][y][z] === \"E\"\r\n            ))\r\n\r\n        }\r\n        const bestAIMove = ()=>{\r\n            var max = -Infinity;\r\n            var move = null\r\n            const turn = this.state.gameState.turn\r\n            const currentPiece = turnOrder[turn]\r\n            const blockingPiece = blockOrder[turn]\r\n            const currentSide = helpOrder[turn]\r\n            playableMoves(this.state.board).forEach(([w,x,y,z])=>{\r\n                const score = boardScore(currentPiece,currentSide,blockingPiece,boardWith(this.state.board,[[w,x,y,z,currentPiece]]),false)\r\n                console.log(w,x,y,z,score,currentPiece)\r\n                const [lines,moveScore] = score\r\n                if(moveScore > max){\r\n                    max = moveScore\r\n                    move = [w,x,y,z]\r\n                }\r\n            })\r\n            console.log(\"BEST SCORE\", max,move)\r\n            return move\r\n        }\r\n        const takeAITurn = ()=>{\r\n            const piece = turnOrder[this.state.gameState.turn]\r\n            //console.log(\"taking AI TURN for \" + piece,this.state.gameState.turn)\r\n            const turnLoc = bestAIMove(piece)\r\n            this.setState((state)=>{\r\n                const lastTurn = this.state.gameState.lastTurn\r\n                lastTurn.push(strRep(...turnLoc))\r\n\r\n                if(lastTurn.length > 3){\r\n                    lastTurn.shift()\r\n                }\r\n\r\n                return state\r\n            })\r\n            playMove(...turnLoc,piece)\r\n        }\r\n\r\n        const isAITurn = (i) =>{\r\n            return ai && [2,3].includes(i)\r\n        }\r\n\r\n        //if(board[1][1][1][1] !== \"B\")\r\n        //    setIndex(1,1,1,1,\"B\")\r\n        const playMove = (w, x, y, z, newItem,then=()=>{})=>{\r\n            console.log(w,x,y,z,newItem, \"placed\")\r\n            setIndex(w,x,y,z,newItem,()=>{\r\n                toggleTurn(()=> {\r\n                    const turn = this.state.gameState.turn\r\n                    boardScore(turnOrder[turn],helpOrder[turn],blockOrder[turn],this.state.board,true)\r\n                    then()\r\n                    console.log(\"turn toggled to be\",this.state.gameState.turn)\r\n                    if (isAITurn(turn))\r\n                        takeAITurn()\r\n                })\r\n            })\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div style={{flex:1, flexDirection:\"row\", display:\"flex\"}}>\r\n                <div >\r\n                    {\r\n                        [0,1,2].map((x)=>(\r\n                            <div style={{display:'flex', justifyContent:'center', flexDirection:\"row\"}} key={x}>\r\n                                {\r\n                                    [0,1,2].map( (w)=>(\r\n                                        <TBoard {...{playMove, gameState, metaBoard}} board={board[w][x]} pos={[w,x]} {...(\r\n                                            w===1? {style:{marginRight:10,marginLeft:10}}:{}\r\n                                        )} key={w}/>)\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div style={{flex:1,display:\"flex\",flexDirection:\"column\", width:\"150px\"}}>\r\n                    <div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                        <div style={{marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                            Current Move\r\n                        </div>\r\n                        <div style={{width:\"70px\",height:\"70px\",position:'relative'}}>\r\n                            {getSvg(turnOrder[this.state.gameState.turn], {...standardLine, stroke:\"white\"})}\r\n                            {turnOrder[this.state.gameState.turn] === \"B\" || true ?\r\n                                <div style={{position:'absolute',right:'-23px',top:\"48px\", height:'25px',width:'25px'}}>\r\n                                    {{X:<MiniX lineProps={{...standardLine, stroke:\"white\"}}/>,O:<MiniO lineProps={{...standardLine, stroke:\"white\"}}/>}[turnOrder[this.state.gameState.turn-1 % 4]]}\r\n\r\n                                </div>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{height:\"180px\"}}/>\r\n                    <div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                        <div style={{width:\"70px\",height:\"70px\"}}>\r\n                            {getSvg(\"X\", {...standardLine, stroke:\"white\"})}\r\n                        </div>\r\n                        <div style={{display:\"flex\",marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                <span style={{marginTop:\"auto\", marginBottom:\"auto\", textAlign:\"center\", fontSize:\"43px\"}}>\r\n                    {metaBoard[0][0][0][0].X || 0}\r\n                </span>\r\n                        </div>\r\n                    </div><div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                    <div style={{width:\"70px\",height:\"70px\"}}>\r\n                        {getSvg(\"O\", {...standardLine, stroke:\"white\"})}\r\n                    </div>\r\n                    <div style={{display:\"flex\",marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                <span style={{marginTop:\"auto\", marginBottom:\"auto\", textAlign:\"center\", fontSize:\"43px\"}}>\r\n                    {metaBoard[0][0][0][0].O || 0}\r\n                </span>\r\n                    </div>\r\n                </div>\r\n                    <h2>{this.state.metaBoard[0][0][0][0].boardScore}\r\n                    </h2>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default TTBoard\r\n","\nimport logo from './logo.svg';\nimport './App.css';\nimport './TTBoard';\nimport GameMenu from \"./GameMenu\";\nimport React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport TTBoard from \"./TTBoard\";\n\n\nfunction App() {\n    return (\n        <>\n                <link rel=\"stylesheet\"\n                      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n                      integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\n                      crossOrigin=\"anonymous\"/>\n\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div style={{flex: 1, margin:50}}>\n                            <div style={{flex: 1}}>\n                                <h1 className={\"text-large\"}>4D Tic Tac Toe</h1>\n                                <h5>Battle in 2 more Ds!</h5>\n                            </div>\n                        </div>\n                    </header>\n\n                    <div>\n                            <TTBoard ai={true}/>\n                    </div>\n                </div></>\n    );\n}\n\n\n/*\n\nclass App extends React.Component {\n    render(){\n        return\n        /*\n        return <Router>\n                <Switch>\n                    <Route exact path=\"/\" render={() => (\n                        <Redirect to=\"/items\" />\n                    )} />\n                    <Route path=\"/items\" component={GameMenu} />\n                </Switch>\n            </Router>\n    }\n}\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}