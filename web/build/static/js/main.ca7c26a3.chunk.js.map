{"version":3,"sources":["logo.svg","TTBoard.js","App.js","reportWebVitals.js","index.js"],"names":["X","lineProps","xmlns","x1","y1","x2","y2","O","cx","cy","r","fill","MiniX","MiniO","B","getSvg","toDisplay","standardLine","stroke","strokeWidth","strokeLinecap","Tile","props","useState","hover","setHover","onHover","undefined","display","onClick","onMouseEnter","onMouseLeave","style","width","height","background","color","jusifyContent","alignContent","margin","padding","position","showText","marginTop","marginBottom","bottom","right","left","transform","textAlign","turnOrder","TBoard","metaBoard","pos","w","x","turn","gameState","nextMove","flex","map","z","flexDirection","y","item","board","playMove","allCells","cells","push","emptyBoard","f","vectorSub","v1","v2","vectorAdd","possibleLines","inRange","vec","every","point","lines","seen","Set","linetest","id","direction","line","has","fa","add","next","length","nextNext","TTBoard","state","score","linesp1","linesp2","this","ai","xs","os","currentPiece","blockingPiece","setMeta","key","value","setState","toggleTurn","then","console","log","boardScore","piece","blocking","setMetaHere","totalScore","cellscores","yourLines","theirLines","forEach","place","placeScore","linescores","sameCount","blockPieces","blocked","themblocked","cell","yourLine","theirLine","lineScore","toString","setIndex","newItem","boardWith","placePieces","boardCopyA","boardOriginal","boardCopy","p","bestAIMove","max","Infinity","move","filter","moveScore","takeAITurn","includes","justifyContent","marginRight","marginLeft","top","fontSize","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca7c26a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState,useEffect } from 'react';\r\n\r\n\r\nfunction X(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"10\" y1=\"10\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"60\" y1=\"10\" x2=\"10\" y2=\"60\"  {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction O(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg  xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle  cx=\"35\" cy=\"35\" r=\"30\" fill=\"none\" {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction MiniX(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"2\" y1=\"2\" x2=\"12\" y2=\"12\"  {...lineProps} />\r\n            <line   x1=\"12\" y1=\"2\" x2=\"2\" y2=\"12\"  {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction MiniO(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg  xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle  cx=\"7\" cy=\"7\" r=\"6\" fill=\"none\" {...lineProps} />\r\n        </svg>)\r\n}\r\nfunction B(lineProps){\r\n    lineProps = lineProps.lineProps;\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" >\r\n            <line  x1=\"35\" y1=\"12\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"35\" y1=\"12\" x2=\"10\" y2=\"60\"  {...lineProps} />\r\n            <line   x1=\"12\" y1=\"60\" x2=\"60\" y2=\"60\"  {...lineProps} />\r\n        </svg>)\r\n}\r\n\r\nfunction getSvg(toDisplay, lineProps){\r\n    switch(toDisplay){\r\n        case \"X\" : return (<X lineProps={lineProps}/>)\r\n        case \"O\" : return (<O lineProps={lineProps}/>)\r\n        case \"B\" : return  (<B lineProps={lineProps}/>)\r\n    }\r\n}\r\nconst standardLine = {stroke:\"black\", strokeWidth:\"4\", strokeLinecap:\"round\"};\r\n\r\nfunction Tile(props){\r\n    const [hover, setHover] = useState(false);\r\n    const lineProps = hover && props.onHover !== \"\" && props.onHover !== undefined  ?\r\n        {stroke:\"gray\", strokeWidth:\"4\", strokeLinecap:\"round\"}\r\n        : standardLine\r\n    ;\r\n    const toDisplay = (hover && props.onHover) || props.display\r\n    return (\r\n        <div onClick={props.onClick}\r\n\r\n             onMouseEnter={() => setHover(true)}\r\n             onMouseLeave={() => setHover(false)}\r\n\r\n             style={{width:'70px',height:'70px', background:'white', color:'black',\r\n            jusifyContent:'center',\r\n            alignContent:'center',\r\n            margin:2,\r\n            padding:0,\r\n                 position:'relative'\r\n        }}>\r\n            {getSvg(toDisplay, lineProps)\r\n            }\r\n            {props.showText ?\r\n                <p style={{margin:0, marginTop:'auto',marginBottom:'auto',display:'block',position:'absolute',\r\n                    bottom:({\r\n                        X:2,\r\n                        O:'50%'\r\n                    }[toDisplay])\r\n                    ,right:'auto',left:'50%',transform:'translateX(-50%)',\r\n                    textAlign: 'center',}}>\r\n                    {props.showText}\r\n                </p> : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst turnOrder = [\"X\",\"B\",\"O\",\"B\"];\r\n\r\nfunction TBoard(props){\r\n    const {showText,metaBoard, pos:[w,x]} = props\r\n    const {turn} = props.gameState;\r\n    const nextMove = turnOrder[turn]\r\n    return (<div style={{...props.style,flex:1, marginTop:10,marginBottom:10 }}>\r\n        {\r\n            [0,1,2].map((z)=>(\r\n                <div key={z} style={{display:'flex',flexDirection:'row'}}>\r\n                    {[0,1,2].map((y) => {\r\n                        const item = props.board[y][z];\r\n                        return (\r\n                        <Tile showText={metaBoard[w][x][y][z].showText} display={item} key={y}\r\n                              onHover={item===\"E\"?nextMove:\"\"}\r\n                          onClick={()=>{\r\n                            if(item===\"E\"){\r\n                                props.playMove(w,x,y,z,nextMove);\r\n                            }\r\n                        }} />\r\n                    )})}\r\n                </div>\r\n\r\n            ))\r\n        }\r\n        {/*\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"X\"/>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"X\"/>\r\n        </div>\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"B\"/>\r\n            <Tile display=\"O\"/>\r\n        </div>\r\n        <div style={{display:'flex',flexDirection:'row'}}>\r\n            <Tile display=\"X\"/>\r\n            <Tile display=\"O\"/>\r\n            <Tile display=\"X\"/>\r\n        </div>*/}\r\n    </div>\r\n   )\r\n}\r\n\r\nfunction allCells(){\r\n    const cells = []\r\n    for(var w=0; w<3; w++){\r\n        for(var x=0; x<3; x++){\r\n            for(var y=0; y<3; y++){\r\n                for(var z=0; z<3; z++){\r\n                    cells.push([w,x,y,z])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n}\r\n\r\nfunction emptyBoard(f){\r\n    const board = [];\r\n    for(var w=0; w<3; w++){\r\n        board[w] = []\r\n        for(var x=0; x<3; x++){\r\n            board[w][x] = []\r\n            for(var y=0; y<3; y++){\r\n                board[w][x][y] = []\r\n                for(var z=0; z<3; z++){\r\n                    board[w][x][y][z] = f();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}\r\n\r\nfunction reverseVel([w,x,y,z]){\r\n    return [-w,-x,-y,-z];\r\n}\r\n\r\n\r\n\r\nfunction inGameBounds(){\r\n    return arguments.slice.call(arguments).every((n)=>(n>=0 && n <= 2))\r\n}\r\nfunction inVelocityBounds(){\r\n    return arguments.slice.call(arguments).every((n)=>(n>=-1 && n <= 1))\r\n}\r\n\r\nfunction getPotentialLine(v1,v2){\r\n    const dif = vectorSub(v2,v1);\r\n}\r\n\r\nfunction vectorSub(v1,v2){\r\n    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2], v1[3] - v2[3]]\r\n}\r\n\r\nfunction vectorAdd(v1,v2){\r\n    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2], v1[3] + v2[3]]\r\n}\r\nfunction possibleLines(w,x,y,z){\r\n\r\n    function inRange(vec){\r\n        return vec.every((x)=>(x < 3 && x >= 0))\r\n    }\r\n\r\n    const point = [w,x,y,z];\r\n    const lines = []\r\n    const seen = new Set()\r\n    for(let w=-1;w<2;w++){\r\n        for(let x=-1;x<2;x++){\r\n            for(let y=-1;y<2;y++){\r\n                linetest:for(let z=-1;z<2;z++){\r\n                    if(w===0 && z===0 && y===0 && x===0)\r\n                        continue;\r\n                    const id = `${w}${x}${y}${z}`\r\n                    const direction = [w,x,y,z];\r\n                    const line = [point];\r\n\r\n                    if(seen.has(id)){\r\n                        continue;\r\n                    }\r\n                    seen.add(id)\r\n                    for(let fa in [0, 1]){\r\n                        let next = [vectorSub,vectorAdd][fa](point,direction);\r\n                        if(inRange(next)){\r\n                            line.push(next);\r\n                            if(line.length === 3){\r\n                                lines.push(line);\r\n                                continue linetest;\r\n                            }\r\n                            let nextNext =  [vectorSub,vectorAdd][fa](next,direction);\r\n                            if(inRange(nextNext)){\r\n                                line.push(nextNext);\r\n                                lines.push(line);\r\n                                continue linetest;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return lines\r\n}\r\n\r\nfunction boardCopy(boardOriginal){\r\n    const board = emptyBoard(()=>\"E\")\r\n    allCells().forEach(([w,x,y,z])=>{\r\n        board[w][x][y][z] = boardOriginal[w][x][y][z]\r\n    })\r\n    return board\r\n}\r\n\r\nclass TTBoard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const defaultMeta = ()=>({\r\n            score:0\r\n        })\r\n\r\n        this.state = {\r\n            board:emptyBoard(()=>(\"E\")),\r\n            metaBoard:emptyBoard(defaultMeta),\r\n            gameState:{\r\n                turn:0,\r\n                    linesp1:0,\r\n                linesp2:0,\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {board,metaBoard,gameState} = this.state\r\n\r\n        const {ai} = this.props\r\n\r\n        const xs = []\r\n        const os = []\r\n\r\n        const currentPiece = turnOrder[this.state.gameState.turn]\r\n        const blockingPiece = [\"O\",\"O\",\"X\",\"X\"][this.state.gameState.turn]\r\n\r\n\r\n\r\n        const setMeta = (w,x,y,z,key,value) => {\r\n            this.setState((state)=>{\r\n                state.metaBoard[w][x][y][z][key] = value\r\n                return state\r\n            })\r\n        }\r\n        const toggleTurn = (then=()=>{})=>{\r\n            this.setState((state)=>({...state, gameState:{...state.gameState, turn:((state.gameState.turn + 1) % 4)}}),()=>{\r\n                console.log(\"here now \", this.state.gameState.turn)\r\n                then()\r\n            })\r\n        }\r\n\r\n\r\n        var boardScore = (piece, blocking,board,setMetaHere=false) => {\r\n            const currentPieces = {X:xs,O:os}[piece];\r\n            let totalScore = 0;\r\n            let lines = 0;\r\n            const cellscores = {}\r\n            const bScore = {cellscores, piece,blocking}\r\n\r\n            var yourLines = 0\r\n            var theirLines = 0\r\n\r\n            let myPossibleLines = 0;\r\n            let theirPossibleLines = 0;\r\n\r\n            allCells().forEach((place)=>{\r\n                var placeScore = 0;\r\n                const linescores = []\r\n                    const pLines = possibleLines(...place)\r\n                pLines.forEach((line) => {\r\n                    var sameCount = 0;\r\n                    let blockPieces = 0;\r\n                    let blocked = 1;\r\n                    let themblocked = 1;\r\n                    line.forEach(([w, x, y, z]) => {\r\n                        const cell = board[w][x][y][z]\r\n\r\n                        if (cell === piece && piece !== \"B\") {\r\n                            sameCount += 1\r\n                            if(sameCount > 1){\r\n                                console.log(cell,piece,w,x,y,z)\r\n                            }\r\n                            themblocked = 0\r\n                        } else if (cell === blocking) {\r\n                            blockPieces += 1\r\n                            blocked = 0\r\n                        } else if (cell === \"B\") {\r\n                            blocked = 0\r\n                            themblocked = 0\r\n                        }\r\n                    });\r\n                    const yourLine = sameCount * blocked;\r\n                    const theirLine = themblocked * blockPieces;\r\n                    var lineScore = (yourLine ** 5) - (theirLine**4)\r\n                    if(theirLine === 3){\r\n                        theirLines += 1\r\n                    }\r\n                    if(yourLine === 3){\r\n                        yourLines += 1\r\n                    }\r\n                    if(lineScore > 30){\r\n                        console.log(place,line,lineScore, piece,blockingPiece,sameCount,blockPieces,blocked,themblocked,\"AAAAAAAAAAAAA\")\r\n                    }\r\n                    if (line[0][0] === 0 && line[1][0] === 0)\r\n                        linescores.push({lineScore, line, sameCount, blockPieces, blocked, themblocked})\r\n                    placeScore += lineScore\r\n                })\r\n                cellscores[place.toString()] = {lines:linescores, placeScore}\r\n                totalScore += placeScore\r\n                if(setMetaHere && false)\r\n                    setMeta(place[0],place[1],place[2],place[3],\"showText\",placeScore)\r\n            })\r\n            //console.log([lines,totalScore],bScore)\r\n            yourLines /= 6\r\n            theirLines /= 6\r\n            if(setMetaHere){\r\n                setMeta(0,0,0,0,\"boardScore\", totalScore)\r\n                setMeta(0,0,0,0,\"X\", blocking===\"O\" ? yourLines : theirLines)\r\n                setMeta(0,0,0,0,\"O\", blocking!==\"O\" ? yourLines : theirLines)\r\n\r\n            }\r\n\r\n\r\n            return [lines,totalScore]\r\n        }\r\n\r\n        var setIndex = (w,x,y,z,newItem,then=()=>{}) =>{\r\n            console.log(\"SETINDEX\", w,x,y,z, newItem, this.state.gameState.turn)\r\n            if(newItem === \"X\"){\r\n                xs.push([w,x,y,z])\r\n            } else if(newItem === \"O\"){\r\n                os.push([w,x,y,z])\r\n                os.push([w,x,y,z])\r\n            }\r\n            this.setState((state)=>{\r\n                state.board[w][x][y][z] = newItem\r\n                return state\r\n            },then)\r\n        }\r\n\r\n        function boardWith(placePieces){\r\n            let boardCopyA = boardCopy(board)\r\n            placePieces.forEach(([w,x,y,z,p])=>{\r\n                boardCopyA[w][x][y][z] = p\r\n            })\r\n            return boardCopyA\r\n        }\r\n\r\n        function playableMoves(){\r\n            return allCells().filter(([w,x,y,z])=>(\r\n                board[w][x][y][z] === \"E\"\r\n            ))\r\n\r\n        }\r\n        const bestAIMove = ()=>{\r\n            var max = -Infinity;\r\n            var move = null\r\n            const turn = this.state.gameState.turn\r\n            const currentPiece = turnOrder[turn]\r\n            const blockingPiece = \"X\"\r\n            playableMoves().forEach(([w,x,y,z])=>{\r\n                const score = boardScore(currentPiece,blockingPiece,boardWith([[w,x,y,z,currentPiece]]),true)\r\n                console.log(w,x,y,z,score,currentPiece)\r\n\r\n                const [lines,moveScore] = score\r\n                if(moveScore > max){\r\n\r\n                    max = moveScore\r\n                    move = [w,x,y,z]\r\n                }\r\n                this.setState((state)=>{\r\n                    state.gameState[blockingPiece===\"O\" ?\"linesp1\" :\"linesp2\"] = lines\r\n                })\r\n            })\r\n            console.log(\"BEST SCORE\", max,move)\r\n            return move\r\n        }\r\n        const takeAITurn = ()=>{\r\n            const piece = turnOrder[this.state.gameState.turn]\r\n            console.log(\"taking AI TURN for \" + piece,this.state.gameState.turn)\r\n            playMove(...bestAIMove(piece),piece)\r\n        }\r\n\r\n\r\n\r\n        if(board[1][1][1][1] !== \"B\")\r\n            setIndex(1,1,1,1,\"B\")\r\n        const playMove = (w, x, y, z, newItem,then=()=>{})=>{\r\n            console.log(w,x,y,z,newItem, \"placed\")\r\n            setIndex(w,x,y,z,newItem,()=>{\r\n                boardScore(currentPiece,blockingPiece,this.state.board,true)\r\n                toggleTurn(()=> {\r\n                    then()\r\n                    console.log(\"turn toggled to be\",this.state.gameState.turn)\r\n                    if (ai && [2,3].includes(this.state.gameState.turn))\r\n                        takeAITurn()\r\n                })\r\n            })\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div style={{flex:1, flexDirection:\"row\", display:\"flex\"}}>\r\n                <div >\r\n                    {\r\n                        [0,1,2].map((x)=>(\r\n                            <div style={{display:'flex', justifyContent:'center', flexDirection:\"row\"}} key={x}>\r\n                                {\r\n                                    [0,1,2].map( (w)=>(\r\n                                        <TBoard {...{playMove, gameState, metaBoard}} board={board[w][x]} pos={[w,x]} {...(\r\n                                            w===1? {style:{marginRight:10,marginLeft:10}}:{}\r\n                                        )} key={w}/>)\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div style={{flex:1,display:\"flex\",flexDirection:\"column\", width:\"150px\"}}>\r\n                    <div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                        <div style={{marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                            Current Move\r\n                        </div>\r\n                        <div style={{width:\"70px\",height:\"70px\",position:'relative'}}>\r\n                            {getSvg(turnOrder[this.state.gameState.turn], {...standardLine, stroke:\"white\"})}\r\n                            {turnOrder[this.state.gameState.turn] === \"B\" || true ?\r\n                                <div style={{position:'absolute',right:'-23px',top:\"48px\", height:'25px',width:'25px'}}>\r\n                                    {{X:<MiniX lineProps={{...standardLine, stroke:\"white\"}}/>,O:<MiniO lineProps={{...standardLine, stroke:\"white\"}}/>}[turnOrder[this.state.gameState.turn-1 % 4]]}\r\n\r\n                                </div>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{height:\"180px\"}}/>\r\n                    <div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                        <div style={{width:\"70px\",height:\"70px\"}}>\r\n                            {getSvg(\"X\", {...standardLine, stroke:\"white\"})}\r\n                        </div>\r\n                        <div style={{display:\"flex\",marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                <span style={{marginTop:\"auto\", marginBottom:\"auto\", textAlign:\"center\", fontSize:\"43px\"}}>\r\n                    {metaBoard[0][0][0][0].X || 0}\r\n                </span>\r\n                        </div>\r\n                    </div><div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n                    <div style={{width:\"70px\",height:\"70px\"}}>\r\n                        {getSvg(\"O\", {...standardLine, stroke:\"white\"})}\r\n                    </div>\r\n                    <div style={{display:\"flex\",marginLeft:\"20px\", marginRight:\"20px\"}}>\r\n                <span style={{marginTop:\"auto\", marginBottom:\"auto\", textAlign:\"center\", fontSize:\"43px\"}}>\r\n                    {metaBoard[0][0][0][0].O || 0}\r\n                </span>\r\n                    </div>\r\n                </div>\r\n                    <h2>{this.state.metaBoard[0][0][0][0].boardScore}\r\n                    </h2>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TTBoard\r\n","import logo from './logo.svg';\nimport './App.css';\nimport './TTBoard'\nimport TTBoard from \"./TTBoard\";\n\nvar aoudighsaa = 0\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{flex:1}}>\n          <div style={{flex:1}}>\n            <h1>4D Tic Tac Toe</h1>\n            <h5>Battle in 2 more Ds!</h5>\n          </div>\n          <div>\n            <TTBoard ai={true} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}